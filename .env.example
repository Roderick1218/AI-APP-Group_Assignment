# Enterprise Travel Policy Management System - Environment Configuration
# Copy this file to .env and fill in your actual values

# ================================
# REQUIRED: Google AI Configuration
# ================================
# Get your API key from: https://aistudio.google.com/app/apikey
# This is required for Google Gemini 1.5 Flash AI functionality
GOOGLE_API_KEY="your_google_gemini_api_key_here"

# ================================
# LOCAL PostgreSQL Database Configuration
# ================================
# Local database settings (used when USE_ONLINE_DATABASE="false")
DB_HOST="localhost"
DB_PORT="5432"
DB_NAME="travel_db"
DB_USER="postgres"
DB_PASSWORD="your_postgres_password"

# ================================
# ONLINE Database Configuration (Prisma)
# ================================
# Online Prisma database connection string
# Get this from your Prisma dashboard: https://prisma.io/
# Format: postgres://hash:secret_key@db.prisma.io:5432/?sslmode=require
DATABASE_ONLINE="postgres://your_hash:your_secret_key@db.prisma.io:5432/?sslmode=require"

# ================================
# DATABASE SELECTION
# ================================
# Set to "true" to use online Prisma database (recommended for production)
# Set to "false" to use local PostgreSQL database (for development)
USE_ONLINE_DATABASE="true"

# ================================
# SYSTEM CONFIGURATION (Optional)
# ================================
# Application settings (these have defaults if not specified)
APP_DEBUG="false"
APP_PORT="8501"
APP_HOST="localhost"

# Vector Database Settings
CHROMA_DB_PATH="./data/chroma_db_policy"
SQLITE_DB_PATH="./data/travel.db"

# ================================
# SETUP INSTRUCTIONS
# ================================
# 1. Copy this file to .env
# 2. Get Google AI API key from https://aistudio.google.com/app/apikey
# 3. Replace "your_google_gemini_api_key_here" with your actual API key
# 4. Choose your database setup:
#    Option A - Use Prisma (Recommended):
#      - Set USE_ONLINE_DATABASE="true"
#      - Get Prisma connection string from https://prisma.io/
#      - Replace DATABASE_ONLINE with your actual Prisma connection string
#    Option B - Use Local PostgreSQL:
#      - Set USE_ONLINE_DATABASE="false"
#      - Install PostgreSQL locally
#      - Configure DB_HOST, DB_PORT, DB_NAME, DB_USER, DB_PASSWORD
# 5. Save the file and run: streamlit run app.py

# ================================
# DATABASE SETUP NOTES
# ================================
# Local PostgreSQL Setup:
# 1. Install PostgreSQL: https://www.postgresql.org/download/
# 2. Create database: CREATE DATABASE travel_db;
# 3. Update DB_USER and DB_PASSWORD with your PostgreSQL credentials
# 4. Set USE_ONLINE_DATABASE="false"
#
# Prisma Setup:
# 1. Sign up at https://prisma.io/
# 2. Create a new project
# 3. Get your connection string from the dashboard
# 4. Set USE_ONLINE_DATABASE="true"

# ================================
# SECURITY NOTES
# ================================
# - Never commit .env file to version control (it's in .gitignore)
# - Keep your API keys and database credentials secure
# - Use environment-specific configurations for production
# - Rotate API keys and database passwords regularly
# - The system will automatically fallback to SQLite if database connection fails

# ================================
# TROUBLESHOOTING
# ================================
# If you encounter issues:
# 1. Verify Google AI API key: 
#    python -c "import google.generativeai as genai; import os; genai.configure(api_key=os.getenv('GOOGLE_API_KEY')); print('✅ API key works!')"
# 2. Test database connection: 
#    python verify_database.py
# 3. Check environment loading: 
#    python -c "import os; from dotenv import load_dotenv; load_dotenv(); print('✅ Environment loaded:', bool(os.getenv('GOOGLE_API_KEY')))"
# 4. Database connection test:
#    python -c "from app import get_database_url; print('Database URL configured:', bool(get_database_url()))"
# 5. If Prisma connection fails, system will automatically use local SQLite fallback
